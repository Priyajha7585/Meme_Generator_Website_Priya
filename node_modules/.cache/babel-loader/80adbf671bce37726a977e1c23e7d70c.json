{"ast":null,"code":"var _jsxFileName = \"/home/priya/priya1/Day1_33_React/react_router/priya1_1/src/Component/Meme1.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Meme1 extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      allMemeImgs: [],\n      randomImg: \"\"\n    };\n\n    this.handleChange = event => {\n      // Destructuring the event. target object\n      const {\n        name,\n        value\n      } = event.target; // Updating the state variable\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        allMemeImgs\n      } = this.state;\n      const rand = allMemeImgs[Math.floor(Math.random() * allMemeImgs.length)].url;\n      this.setState({\n        randomImg: rand\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Fetching data from the API\n    fetch(\"https://api.imgflip.com/get_memes\") // Converting the promise recieved into JSON\n    .then(response => response.json()).then(content => // Updating state variables\n    this.setState({\n      allMemeImgs: content.data.memes\n    }));\n  } // Method to change the value of input fields\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          width: 200\n        },\n        src: meme,\n        alt: \"custom meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 2\n    }, this);\n  }\n\n}\n\nexport default Meme1;","map":{"version":3,"sources":["/home/priya/priya1/Day1_33_React/react_router/priya1_1/src/Component/Meme1.js"],"names":["React","Meme1","Component","state","topText","bottomText","allMemeImgs","randomImg","handleChange","event","name","value","target","setState","handleSubmit","preventDefault","rand","Math","floor","random","length","url","componentDidMount","fetch","then","response","json","content","data","memes","render","textAlign","width","meme"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEpCC,KAFoC,GAE5B;AACPC,MAAAA,OAAO,EAAE,EADF;AAEPC,MAAAA,UAAU,EAAE,EAFL;AAGPC,MAAAA,WAAW,EAAE,EAHN;AAIPC,MAAAA,SAAS,EAAE;AAJJ,KAF4B;;AAAA,SAwBpCC,YAxBoC,GAwBrBC,KAAK,IAAI;AACvB;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBF,KAAK,CAACG,MAA9B,CAFuB,CAIvB;;AACA,WAAKC,QAAL,CAAc;AACd,SAACH,IAAD,GAAQC;AADM,OAAd;AAGA,KAhCmC;;AAAA,SAmCpCG,YAnCoC,GAmCrBL,KAAK,IAAI;AACvBA,MAAAA,KAAK,CAACM,cAAN;AACA,YAAM;AAAET,QAAAA;AAAF,UAAkB,KAAKH,KAA7B;AACA,YAAMa,IAAI,GACVV,WAAW,CAACW,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KACrBb,WAAW,CAACc,MADF,CAAD,CAAX,CACuBC,GAFvB;AAGA,WAAKR,QAAL,CAAc;AACdN,QAAAA,SAAS,EAAES;AADG,OAAd;AAGA,KA5CmC;AAAA;;AASpCM,EAAAA,iBAAiB,GAAG;AAEnB;AACAC,IAAAA,KAAK,CAAC,mCAAD,CAAL,CACA;AADA,KAECC,IAFD,CAEMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFlB,EAGCF,IAHD,CAGMG,OAAO,IACZ;AACA,SAAKd,QAAL,CAAc;AACdP,MAAAA,WAAW,EAAEqB,OAAO,CAACC,IAAR,CAAaC;AADZ,KAAd,CALD;AASA,GArBmC,CAuBpC;;;AAuBAC,EAAAA,MAAM,GAAG;AACR,wBACA;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA,6BACK;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAZ;AAA4B,QAAA,GAAG,EAAEC,IAAjC;AAAuC,QAAA,GAAG,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YADA;AAsCA;;AArFmC;;AAwFpC,eAAehC,KAAf","sourcesContent":["import React from \"react\";\n\nclass Meme1 extends React.Component {\n  \nstate = {\n\ttopText: \"\",\n\tbottomText: \"\",\n\tallMemeImgs: [],\n\trandomImg: \"\"\n};\n\ncomponentDidMount() {\n\t\n\t// Fetching data from the API\n\tfetch(\"https://api.imgflip.com/get_memes\")\n\t// Converting the promise recieved into JSON\n\t.then(response => response.json())\n\t.then(content =>\n\t\t// Updating state variables\n\t\tthis.setState({\n\t\tallMemeImgs: content.data.memes\n\t\t})\n\t);\n}\n\n// Method to change the value of input fields\nhandleChange = event => {\n\t// Destructuring the event. target object\n\tconst { name, value } = event.target;\n\t\n\t// Updating the state variable\n\tthis.setState({\n\t[name]: value\n\t});\n};\n\n// Method to submit from and create meme\nhandleSubmit = event => {\n\tevent.preventDefault();\n\tconst { allMemeImgs } = this.state;\n\tconst rand =\n\tallMemeImgs[Math.floor(Math.random()\n\t* allMemeImgs.length)].url;\n\tthis.setState({\n\trandomImg: rand\n\t});\n};\n\nrender() {\n\treturn (\n\t<div style={{ textAlign: \"center\" }}>\n      <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\n    {/* <img style={{ width: 200 }} src=\"allMemeImgs\" alt=\"No Image\"/> */}\n\t\t{/* // Controlled form\n\t\t<form className=\"meme-form\" onSubmit={this.handleSubmit}>\n\t\t// Input field to get First text\n\t\t<input\n\t\t\tplaceholder=\"Enter Text\"\n\t\t\ttype=\"text\"\n\t\t\tvalue={this.state.topText}\n\t\t\tname=\"topText\"\n\t\t\tonChange={this.handleChange}\n\t\t/>\n\t\t// Input field to get Lsst text\n\t\t<input\n\t\t\tplaceholder=\"Enter Text\"\n\t\t\ttype=\"text\"\n\t\t\tvalue={this.state.bottomText}\n\t\t\tname=\"bottomText\"\n\t\t\tonChange={this.handleChange}\n\t\t/>\n\t\t// Button to generate meme\n\t\t<button>Generate</button>\n\t\t</form>\n\n\t\t<br />\n\t\t<div className=\"meme\">\n\t\t// Only show the below elements when the image is ready to be displayed\n\t\t{this.state.randomImg === \"\" ? \"\" :\n\t\t\t<img src={this.state.randomImg} alt=\"meme\" />}\n\t\t{this.state.randomImg === \"\" ? \"\" :\n\t\t\t<h2 className=\"top\">{this.state.topText}</h2>}\n\t\t{this.state.randomImg === \"\" ? \"\" :\n\t\t\t<h2 className=\"bottom\">{this.state.bottomText}</h2>}\n\t\t</div> */}\n\t</div>\n\t);\n}\n}\n\nexport default Meme1;\n"]},"metadata":{},"sourceType":"module"}