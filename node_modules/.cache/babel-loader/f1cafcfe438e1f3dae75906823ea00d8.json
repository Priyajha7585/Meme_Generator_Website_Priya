{"ast":null,"code":"var _jsxFileName = \"/home/priya/priya1/Day1_33_React/react_router/priya1_1/src/Component/Meme1.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import { Link } from 'react-router-dom';\n// export default function Meme1() {\n//     let im1=\"\";\n//     return (\n//         <div style={{textAlign:'center'}}>\n//             <form>\n//                 <h1></h1>\n//                 <label className=\"name\">UserName</label>\n//                 <input type=\"text\" /><br /><br />\n//                 <label className=\"pass\">Password</label>\n//                 <input type=\"text\" /><br /><br />\n//                 <label className=\"text1\">Text1</label>\n//                 <input type=\"text\" /><br /><br />\n//                 <label className=\"text2\">Text2</label>\n//                 <input type=\"text\" /><br /><br />\n//                 <Link to=\"/res\"><button className=\"btn1\">Click here</button></Link><br /><br />\n//                 <img src=\"\" alt=\"No image\"/>\n//             </form>\n//         </div>\n//     )\n// }\nimport React, { useState, useEffect } from \"react\";\nimport { Meme2 } from \"./components/Meme2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(_ref => {\n    let [key, value] = _ref;\n    return `${key}=${value}`;\n  });\n  return \"?\" + params.join(\"&\");\n};\n\nfunction Meme1() {\n  _s();\n\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x => x.json().then(response => setTemplates(response.data.memes)));\n  }, []);\n\n  if (meme) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          width: 200\n        },\n        src: meme,\n        alt: \"custom meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [template && /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async e => {\n        e.preventDefault(); // add logic to create meme from api\n\n        const params = {\n          template_id: template.id,\n          text0: topText,\n          text1: bottomText,\n          username: \"Priya_Jha\",\n          password: \"Sambhavi7585@\"\n        };\n        const response = await fetch(`https://api.imgflip.com/caption_image${objectToQueryParam(params)}`);\n        const json = await response.json();\n        setMeme(json.data.url);\n      },\n      children: [/*#__PURE__*/_jsxDEV(Meme, {\n        template: template\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"top text\",\n        value: topText,\n        onChange: e => setTopText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"bottom text\",\n        value: bottomText,\n        onChange: e => setBottomText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"create meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), !template && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Pick a template\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), templates.map(template => {\n        return /*#__PURE__*/_jsxDEV(Meme, {\n          template: template,\n          onClick: () => {\n            setTemplate(template);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this);\n      })]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Meme1, \"IYWol5E4C+Kt0/y+Wcj7CJ/7SU0=\");\n\n_c = Meme1;\nexport default Meme1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme1\");","map":{"version":3,"sources":["/home/priya/priya1/Day1_33_React/react_router/priya1_1/src/Component/Meme1.js"],"names":["React","useState","useEffect","Meme2","objectToQueryParam","obj","params","Object","entries","map","key","value","join","Meme1","templates","setTemplates","template","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","fetch","then","x","json","response","data","memes","textAlign","width","e","preventDefault","template_id","id","text0","text1","username","password","url","target"],"mappings":";;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,oBAAtB;;;;AAEA,MAAMC,kBAAkB,GAAGC,GAAG,IAAI;AAChC,QAAMC,MAAM,GAAGC,MAAM,CAACC,OAAP,CAAeH,GAAf,EAAoBI,GAApB,CAAwB;AAAA,QAAC,CAACC,GAAD,EAAMC,KAAN,CAAD;AAAA,WAAmB,GAAED,GAAI,IAAGC,KAAM,EAAlC;AAAA,GAAxB,CAAf;AACA,SAAO,MAAML,MAAM,CAACM,IAAP,CAAY,GAAZ,CAAb;AACD,CAHD;;AAKA,SAASC,KAAT,GAAiB;AAAA;;AACf,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BpB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACqB,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,KAAK,CAAC,mCAAD,CAAL,CAA2CC,IAA3C,CAAgDC,CAAC,IAC/CA,CAAC,CAACC,IAAF,GAASF,IAAT,CAAcG,QAAQ,IAAIb,YAAY,CAACa,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAtC,CADF;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAIR,IAAJ,EAAU;AACR,wBACE;AAAK,MAAA,KAAK,EAAE;AAAES,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA,6BACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAZ;AAA4B,QAAA,GAAG,EAAEV,IAAjC;AAAuC,QAAA,GAAG,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE;AAAK,IAAA,KAAK,EAAE;AAAES,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA,eACGf,QAAQ,iBACP;AACE,MAAA,QAAQ,EAAE,MAAMiB,CAAN,IAAW;AACnBA,QAAAA,CAAC,CAACC,cAAF,GADmB,CAEnB;;AACA,cAAM5B,MAAM,GAAG;AACb6B,UAAAA,WAAW,EAAEnB,QAAQ,CAACoB,EADT;AAEbC,UAAAA,KAAK,EAAEnB,OAFM;AAGboB,UAAAA,KAAK,EAAElB,UAHM;AAIbmB,UAAAA,QAAQ,EAAE,WAJG;AAKbC,UAAAA,QAAQ,EAAE;AALG,SAAf;AAOA,cAAMZ,QAAQ,GAAG,MAAMJ,KAAK,CACzB,wCAAuCpB,kBAAkB,CACxDE,MADwD,CAExD,EAHwB,CAA5B;AAKA,cAAMqB,IAAI,GAAG,MAAMC,QAAQ,CAACD,IAAT,EAAnB;AACAJ,QAAAA,OAAO,CAACI,IAAI,CAACE,IAAL,CAAUY,GAAX,CAAP;AACD,OAlBH;AAAA,8BAoBE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEzB;AAAhB;AAAA;AAAA;AAAA;AAAA,cApBF,eAqBE;AACE,QAAA,WAAW,EAAC,UADd;AAEE,QAAA,KAAK,EAAEE,OAFT;AAGE,QAAA,QAAQ,EAAEe,CAAC,IAAId,UAAU,CAACc,CAAC,CAACS,MAAF,CAAS/B,KAAV;AAH3B;AAAA;AAAA;AAAA;AAAA,cArBF,eA0BE;AACE,QAAA,WAAW,EAAC,aADd;AAEE,QAAA,KAAK,EAAES,UAFT;AAGE,QAAA,QAAQ,EAAEa,CAAC,IAAIZ,aAAa,CAACY,CAAC,CAACS,MAAF,CAAS/B,KAAV;AAH9B;AAAA;AAAA;AAAA;AAAA,cA1BF,eA+BE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAoCG,CAACK,QAAD,iBACC;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGF,SAAS,CAACL,GAAV,CAAcO,QAAQ,IAAI;AACzB,4BACE,QAAC,IAAD;AACE,UAAA,QAAQ,EAAEA,QADZ;AAEE,UAAA,OAAO,EAAE,MAAM;AACbC,YAAAA,WAAW,CAACD,QAAD,CAAX;AACD;AAJH;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATA,CAFH;AAAA,oBArCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsDD;;GA3EQH,K;;KAAAA,K;AA6ET,eAAeA,KAAf","sourcesContent":["// import React from 'react';\n// import { Link } from 'react-router-dom';\n\n// export default function Meme1() {\n//     let im1=\"\";\n//     return (\n        \n//         <div style={{textAlign:'center'}}>\n//             <form>\n//                 <h1></h1>\n//                 <label className=\"name\">UserName</label>\n//                 <input type=\"text\" /><br /><br />\n//                 <label className=\"pass\">Password</label>\n//                 <input type=\"text\" /><br /><br />\n//                 <label className=\"text1\">Text1</label>\n//                 <input type=\"text\" /><br /><br />\n//                 <label className=\"text2\">Text2</label>\n//                 <input type=\"text\" /><br /><br />\n//                 <Link to=\"/res\"><button className=\"btn1\">Click here</button></Link><br /><br />\n//                 <img src=\"\" alt=\"No image\"/>\n//             </form>\n//         </div>\n//     )\n// }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Meme2 } from \"./components/Meme2\";\n\nconst objectToQueryParam = obj => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction Meme1() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(x =>\n      x.json().then(response => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {template && (\n        <form\n          onSubmit={async e => {\n            e.preventDefault();\n            // add logic to create meme from api\n            const params = {\n              template_id: template.id,\n              text0: topText,\n              text1: bottomText,\n              username: \"Priya_Jha\",\n              password: \"Sambhavi7585@\"\n            };\n            const response = await fetch(\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\n                params\n              )}`\n            );\n            const json = await response.json();\n            setMeme(json.data.url);\n          }}\n        >\n          <Meme template={template} />\n          <input\n            placeholder=\"top text\"\n            value={topText}\n            onChange={e => setTopText(e.target.value)}\n          />\n          <input\n            placeholder=\"bottom text\"\n            value={bottomText}\n            onChange={e => setBottomText(e.target.value)}\n          />\n          <button type=\"submit\">create meme</button>\n        </form>\n      )}\n      {!template && (\n        <>\n          <h1>Pick a template</h1>\n          {templates.map(template => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Meme1;\n"]},"metadata":{},"sourceType":"module"}